{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["TodoItem","id","title","completed","changeCompleted","removeTodo","changeTodo","useState","isEditMode","setIsEditMode","newTodoTitle","setNewTodoTitle","className","classNames","editing","type","onChange","checked","onDoubleClick","onClick","value","autoFocus","event","target","trimLeft","onKeyUp","key","onFocus","e","currentTarget","select","onBlur","TodoList","items","map","item","TodoFilter","todosType","selectTodosType","all","active","href","selected","innerText","TodoApp","todos","setTodos","newTodo","setNewTodo","allTodosActive","setAllTodosActive","setTodosType","currentTitle","setCurrentTitle","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","filteredTodos","uncompletedTodos","filter","todo","completedTodos","FILTER","onSubmit","preventDefault","placeholder","Date","length","htmlFor","todoId","changedTodos","newValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f2d5922.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  id,\n  title,\n  completed,\n  changeCompleted,\n  removeTodo,\n  changeTodo,\n}) => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [newTodoTitle, setNewTodoTitle] = useState(title);\n\n  const handleEditing = (event) => {\n    switch (event.key) {\n      case 'Enter':\n        if (newTodoTitle) {\n          changeTodo(id, newTodoTitle);\n        }\n\n        setIsEditMode(false);\n        break;\n\n      case 'Escape':\n        setNewTodoTitle(title);\n        setIsEditMode(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({\n          completed,\n          editing: isEditMode,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => changeCompleted(id)}\n            checked={completed}\n          />\n          <label\n            onDoubleClick={() => setIsEditMode(true)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(id)}\n          />\n        </div>\n        {isEditMode && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTodoTitle}\n            autoFocus\n            onChange={(event) => {\n              setNewTodoTitle(event.target.value.trimLeft());\n            }}\n            onKeyUp={handleEditing}\n            onFocus={e => e.currentTarget.select()}\n            onBlur={() => {\n              if (newTodoTitle) {\n                changeTodo(id, newTodoTitle);\n              }\n\n              setIsEditMode(false);\n            }}\n          />\n        )}\n\n      </li>\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  items,\n  changeCompleted,\n  removeTodo,\n  changeTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        {...item}\n        changeCompleted={changeCompleted}\n        removeTodo={removeTodo}\n        changeTodo={changeTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({\n  todosType,\n  selectTodosType,\n  all,\n  active,\n  completed,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: todosType === all,\n        })}\n        onClick={event => selectTodosType(event.target.innerText)}\n      >\n        {all}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: todosType === active,\n        })}\n        onClick={event => selectTodosType(event.target.innerText)}\n      >\n        {active}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: todosType === completed,\n        })}\n        onClick={event => selectTodosType(event.target.innerText)}\n      >\n        {completed}\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  todosType: PropTypes.string.isRequired,\n  selectTodosType: PropTypes.func.isRequired,\n  all: PropTypes.string.isRequired,\n  active: PropTypes.string.isRequired,\n  completed: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState({});\n  const [allTodosActive, setAllTodosActive] = useState(true);\n  const [todosType, setTodosType] = useState('All');\n  const [currentTitle, setCurrentTitle] = useState('');\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const FILTER = {\n    all: 'All',\n    active: 'Active',\n    completed: 'Completed',\n  };\n\n  const changeCompleted = (todoId) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, completed: !todo.completed };\n    });\n\n    setTodos(changedTodos);\n  };\n\n  const setStatusAllTodos = () => {\n    setTodos(\n      todos.map(todo => ({\n        ...todo,\n        completed: allTodosActive,\n      })),\n    );\n\n    setAllTodosActive(!allTodosActive);\n  };\n\n  const selectTodosType = (type) => {\n    setTodosType(type);\n  };\n\n  let filteredTodos;\n\n  switch (todosType) {\n    case FILTER.active:\n      filteredTodos = uncompletedTodos;\n      break;\n\n    case FILTER.completed:\n      filteredTodos = completedTodos;\n      break;\n\n    default:\n      filteredTodos = todos;\n  }\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const changeTodo = (todoId, newValue) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, title: newValue };\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          if (currentTitle) {\n            setTodos([...todos, newTodo]);\n          }\n\n          setCurrentTitle('');\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={currentTitle}\n            onChange={(event) => {\n              setCurrentTitle(event.target.value.trimLeft());\n              setNewTodo({\n                id: +new Date(),\n                title: event.target.value.trimLeft(),\n                completed: false,\n              });\n            }}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={completedTodos.length === todos.length}\n              onChange={setStatusAllTodos}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              items={filteredTodos}\n              changeCompleted={changeCompleted}\n              removeTodo={removeTodo}\n              changeTodo={changeTodo}\n            />\n\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${uncompletedTodos.length} items left`}\n            </span>\n\n            <TodoFilter\n              todosType={todosType}\n              selectTodosType={selectTodosType}\n              all={FILTER.all}\n              active={FILTER.active}\n              completed={FILTER.completed}\n            />\n\n            {completedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './App';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}