{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","constants.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["TodoItem","item","changeStatus","removeTodo","changeTodo","id","title","completed","useState","isEditMode","setIsEditMode","newTodoTitle","setNewTodoTitle","className","classNames","editing","type","onChange","checked","onDoubleClick","onClick","value","autoFocus","event","target","trimLeft","onKeyUp","key","onFocus","e","currentTarget","select","onBlur","TodoList","items","map","FILTER","all","active","TodoFilter","todosType","selectTodosType","buttons","Object","values","button","href","selected","TodoApp","todos","setTodos","newTodo","setNewTodo","setTodosType","currentTitle","setCurrentTitle","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","uncompletedTodos","useMemo","filter","todo","completedTodos","filteredTodos","onSubmit","preventDefault","placeholder","Date","length","htmlFor","todoId","changedTodos","newValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.770d90bb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  item,\n  changeStatus,\n  removeTodo,\n  changeTodo,\n}) => {\n  const { id, title, completed } = item;\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [newTodoTitle, setNewTodoTitle] = useState(title);\n\n  const handleEditing = (event) => {\n    switch (event.key) {\n      case 'Enter':\n        if (newTodoTitle) {\n          changeTodo(id, newTodoTitle);\n        } else {\n          setNewTodoTitle(title);\n        }\n\n        setIsEditMode(false);\n        break;\n\n      case 'Escape':\n        setNewTodoTitle(title);\n        setIsEditMode(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({\n          completed,\n          editing: isEditMode,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => changeStatus(id)}\n            checked={completed}\n          />\n          <label\n            onDoubleClick={() => setIsEditMode(true)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(id)}\n          />\n        </div>\n        {isEditMode && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTodoTitle}\n            autoFocus\n            onChange={(event) => {\n              setNewTodoTitle(event.target.value.trimLeft());\n            }}\n            onKeyUp={handleEditing}\n            onFocus={e => e.currentTarget.select()}\n            onBlur={() => {\n              if (newTodoTitle) {\n                changeTodo(id, newTodoTitle);\n              }\n\n              setIsEditMode(false);\n            }}\n          />\n        )}\n\n      </li>\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  items,\n  changeStatus,\n  removeTodo,\n  changeTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        changeStatus={changeStatus}\n        removeTodo={removeTodo}\n        changeTodo={changeTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","export const FILTER = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { FILTER } from '../../constants';\n\nexport const TodoFilter = ({ todosType, selectTodosType }) => {\n  const buttons = Object.values(FILTER);\n\n  return (\n    <ul className=\"filters\">\n      {buttons.map(button => (\n        <li>\n          <a\n            href={`#/${button}`}\n            className={classNames({\n              selected: todosType === button,\n            })}\n            onClick={() => selectTodosType(button)}\n          >\n            {button}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nTodoFilter.propTypes = {\n  todosType: PropTypes.string.isRequired,\n  selectTodosType: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { FILTER } from './constants';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState({});\n  const [todosType, setTodosType] = useState('All');\n  const [currentTitle, setCurrentTitle] = useState('');\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const uncompletedTodos = useMemo(\n    () => todos.filter(todo => !todo.completed),\n    [todos],\n  );\n  const completedTodos = useMemo(\n    () => todos.filter(todo => todo.completed),\n    [todos],\n  );\n\n  const changeStatus = (todoId) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, completed: !todo.completed };\n    });\n\n    setTodos(changedTodos);\n  };\n\n  const changeStatusAllTodos = () => {\n    setTodos(\n      todos.map(todo => ({\n        ...todo,\n        completed: completedTodos.length !== todos.length,\n      })),\n    );\n  };\n\n  const selectTodosType = (type) => {\n    setTodosType(type);\n  };\n\n  const filteredTodos = useMemo(() => {\n    switch (todosType) {\n      case FILTER.active:\n        return uncompletedTodos;\n\n      case FILTER.completed:\n        return completedTodos;\n\n      default:\n        return todos;\n    }\n  }, [todos, todosType]);\n\n  const clearCompleted = () => {\n    setTodos(uncompletedTodos);\n  };\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const changeTodo = (todoId, newValue) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, title: newValue };\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          if (currentTitle) {\n            setTodos([...todos, newTodo]);\n          }\n\n          setCurrentTitle('');\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={currentTitle}\n            onChange={(event) => {\n              setCurrentTitle(event.target.value.trimLeft());\n              setNewTodo({\n                id: +new Date(),\n                title: event.target.value.trimLeft(),\n                completed: false,\n              });\n            }}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={completedTodos.length === todos.length}\n              onChange={changeStatusAllTodos}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              items={filteredTodos}\n              changeStatus={changeStatus}\n              removeTodo={removeTodo}\n              changeTodo={changeTodo}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${uncompletedTodos.length} items left`}\n            </span>\n\n            <TodoFilter\n              todosType={todosType}\n              selectTodosType={selectTodosType}\n            />\n\n            {completedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './App';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}