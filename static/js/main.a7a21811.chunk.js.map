{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["TodoItem","id","title","completed","changeCompleted","removeTodo","className","classNames","type","onChange","checked","onClick","TodoList","items","map","item","key","TodoFilter","todosType","selectTodosType","href","selected","event","target","innerText","TodoApp","filteredTodos","useState","todos","setTodos","newTodo","setNewTodo","allTodosActive","setAllTodosActive","setTodosType","uncompletedTodos","filter","todo","completedTodos","onSubmit","preventDefault","placeholder","value","Date","trimLeft","length","htmlFor","todoId","changedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7a21811.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  id,\n  title,\n  completed,\n  changeCompleted,\n  removeTodo,\n}) => (\n  <>\n    <li className={classNames({ completed })}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => changeCompleted(id)}\n          checked={completed}\n        />\n        <label>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n\n    {/* <li className=\"completed\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" />\n          <label>qwertyuio</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n\n      <li className=\"editing\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" />\n          <label>zxcvbnm</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n\n      <li>\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" />\n          <label>1234567890</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li> */}\n  </>\n);\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({ items, changeCompleted, removeTodo }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        {...item}\n        changeCompleted={changeCompleted}\n        removeTodo={removeTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({ todosType, selectTodosType }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: todosType === 'All',\n        })}\n        onClick={event => selectTodosType(event.target.innerText)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: todosType === 'Active',\n        })}\n        onClick={event => selectTodosType(event.target.innerText)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: todosType === 'Completed',\n        })}\n        onClick={event => selectTodosType(event.target.innerText)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  todosType: PropTypes.string.isRequired,\n  selectTodosType: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState({});\n  const [allTodosActive, setAllTodosActive] = useState(true);\n  const [todosType, setTodosType] = useState('All');\n\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const changeCompleted = (todoId) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, completed: !todo.completed };\n    });\n\n    setTodos(changedTodos);\n  };\n\n  const setStatusAllTodos = () => {\n    setTodos(\n      todos.map(todo => ({\n        ...todo,\n        completed: allTodosActive,\n      })),\n    );\n\n    setAllTodosActive(!allTodosActive);\n  };\n\n  const selectTodosType = (type) => {\n    setTodosType(type);\n  };\n\n  let filteredTodos;\n\n  switch (todosType) {\n    case 'Active':\n      filteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'Completed':\n      filteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      filteredTodos = todos;\n  }\n\n  const clearCompleted = () => {\n    setTodos(\n      todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })),\n    );\n  };\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          setTodos([...todos, newTodo]);\n          setNewTodo({ title: '' });\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo.title}\n            onChange={event => setNewTodo({\n              id: +new Date(),\n              title: event.target.value.trimLeft(),\n              completed: false,\n            })}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={setStatusAllTodos}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              items={filteredTodos}\n              changeCompleted={changeCompleted}\n              removeTodo={removeTodo}\n            />\n\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${uncompletedTodos.length} items left`}\n            </span>\n\n            <TodoFilter\n              todosType={todosType}\n              selectTodosType={selectTodosType}\n            />\n\n            {completedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './App';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}