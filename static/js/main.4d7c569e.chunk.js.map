{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","constants.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["TodoItem","id","title","completed","changeStatus","removeTodo","changeTodo","useState","isEditMode","setIsEditMode","newTodoTitle","setNewTodoTitle","className","classNames","editing","type","onChange","checked","onDoubleClick","onClick","value","autoFocus","event","target","trimLeft","onKeyUp","key","onFocus","e","currentTarget","select","onBlur","TodoList","items","map","item","FILTER","TodoFilter","todosType","selectTodosType","href","selected","TodoApp","todos","setTodos","newTodo","setNewTodo","setTodosType","currentTitle","setCurrentTitle","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","uncompletedTodos","filter","todo","completedTodos","filteredTodos","useMemo","onSubmit","preventDefault","placeholder","Date","length","htmlFor","todoId","changedTodos","newValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d7c569e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  id,\n  title,\n  completed,\n  changeStatus,\n  removeTodo,\n  changeTodo,\n}) => {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [newTodoTitle, setNewTodoTitle] = useState(title);\n\n  const handleEditing = (event) => {\n    switch (event.key) {\n      case 'Enter':\n        if (newTodoTitle) {\n          changeTodo(id, newTodoTitle);\n        } else {\n          setNewTodoTitle(title);\n        }\n\n        setIsEditMode(false);\n        break;\n\n      case 'Escape':\n        setNewTodoTitle(title);\n        setIsEditMode(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({\n          completed,\n          editing: isEditMode,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => changeStatus(id)}\n            checked={completed}\n          />\n          <label\n            onDoubleClick={() => setIsEditMode(true)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(id)}\n          />\n        </div>\n        {isEditMode && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTodoTitle}\n            autoFocus\n            onChange={(event) => {\n              setNewTodoTitle(event.target.value.trimLeft());\n            }}\n            onKeyUp={handleEditing}\n            onFocus={e => e.currentTarget.select()}\n            onBlur={() => {\n              if (newTodoTitle) {\n                changeTodo(id, newTodoTitle);\n              }\n\n              setIsEditMode(false);\n            }}\n          />\n        )}\n\n      </li>\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  items,\n  changeStatus,\n  removeTodo,\n  changeTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        {...item}\n        changeStatus={changeStatus}\n        removeTodo={removeTodo}\n        changeTodo={changeTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","export const FILTER = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { FILTER } from '../../constants';\n\nexport const TodoFilter = ({ todosType, selectTodosType }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: todosType === FILTER.all,\n        })}\n        onClick={() => selectTodosType(FILTER.all)}\n      >\n        {FILTER.all}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: todosType === FILTER.active,\n        })}\n        onClick={() => selectTodosType(FILTER.active)}\n      >\n        {FILTER.active}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: todosType === FILTER.completed,\n        })}\n        onClick={() => selectTodosType(FILTER.completed)}\n      >\n        {FILTER.completed}\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  todosType: PropTypes.string.isRequired,\n  selectTodosType: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { FILTER } from './constants';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState({});\n  const [todosType, setTodosType] = useState('All');\n  const [currentTitle, setCurrentTitle] = useState('');\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const changeStatus = (todoId) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, completed: !todo.completed };\n    });\n\n    setTodos(changedTodos);\n  };\n\n  const changeStatusAllTodos = () => {\n    setTodos(\n      todos.map(todo => ({\n        ...todo,\n        completed: completedTodos.length !== todos.length,\n      })),\n    );\n  };\n\n  const selectTodosType = (type) => {\n    setTodosType(type);\n  };\n\n  const filteredTodos = useMemo(() => {\n    switch (todosType) {\n      case FILTER.active:\n        return uncompletedTodos;\n\n      case FILTER.completed:\n        return completedTodos;\n\n      default:\n        return todos;\n    }\n  }, [todos, todosType]);\n\n  const clearCompleted = () => {\n    setTodos(uncompletedTodos);\n  };\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const changeTodo = (todoId, newValue) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, title: newValue };\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          if (currentTitle) {\n            setTodos([...todos, newTodo]);\n          }\n\n          setCurrentTitle('');\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={currentTitle}\n            onChange={(event) => {\n              setCurrentTitle(event.target.value.trimLeft());\n              setNewTodo({\n                id: +new Date(),\n                title: event.target.value.trimLeft(),\n                completed: false,\n              });\n            }}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={completedTodos.length === todos.length}\n              onChange={changeStatusAllTodos}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              items={filteredTodos}\n              changeStatus={changeStatus}\n              removeTodo={removeTodo}\n              changeTodo={changeTodo}\n            />\n\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${uncompletedTodos.length} items left`}\n            </span>\n\n            <TodoFilter\n              todosType={todosType}\n              selectTodosType={selectTodosType}\n            />\n\n            {completedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './App';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}